public class Main {
	static int heapsize,heap_height,N;
public static void main(String args[])
{
	int A[]={13,21,20,46,16,11,10,31,41,71,8};
	heapsize=A.length;
	int n1=A.length;
	while(n1!=1)
	{
		heap_height++;
		n1=n1/2;
	}
	Build_MinMaxHeap(A);
	for(int i=0;i<=A.length;i++)
		System.out.println(A[i]);
}
public static void Build_MinMaxHeap(int []A)
{
       int j=0;
	   for(int i=0;i<heap_height;i++)
       {
		  if(i%2!=0)
    	 {
			for(;j<Math.pow(2,i);j++)
    		maxheap(A,j);
    	 }
		  else
		  {
			  for(;j<Math.pow(2,i);j++)
		    		minheap(A,j);  
		  }
       }
    	   
}
public static void maxheap(int arr[], int i)
{ 
    int left = 2*i ;
    int right = 2*i + 1;
    int max = i;
    if (left <= heapsize && arr[left] > arr[i])
        max = left;
    if (right <= heapsize && arr[right] > arr[max])        
        max = right;

    if (max != i)
    {
        swap(arr, i, max);
        maxheap(arr, max);
    }
}
public static void swap(int[] a, int i, int j) {
    int temp = a[i];
    a[i] = a[j];
    a[j] = temp;
}
public static void minheap(int arr[], int i)
{ 
    int left = 2*i ;
    int right = 2*i + 1;
    int min = i;
    if (left <= N && arr[left] < arr[i])
        min = left;
    if (right <= N && arr[right] < arr[min])        
        min = right;

    if (min != i)
    {
        swap(arr, i, min);
        minheap(arr, min);
    }
}

}
