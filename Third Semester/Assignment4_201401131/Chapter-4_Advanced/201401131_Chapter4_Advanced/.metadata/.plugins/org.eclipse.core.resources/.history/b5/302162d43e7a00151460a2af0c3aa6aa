import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.zip.ZipEntry;
public class BST {
    Node root;
   
	public BST() {
		// TODO Auto-generated constructor stub
	root=null;
	}
	public void insert(int x){
		Node Z=new Node();
		Z.setdata(x);
		insert1(Z);	
	}
	private void insert1(Node Z){
		 Node X=root;
		 Node Y=null;
		 while(X!=null){
			 Y=X;
			 if(Z.getData()<X.getData()){
				 X=X.getLeft();
			 }
			 else{
				 X=X.getRight();
			 }
		 }
		 Z.setparent(Y);
		 if(Y==null){
			 root=Z;
		 }
		 else{ 
			 if(Z.getData()<Y.getData()){
				 Y.setleft(Z);
			 }
			 else{
				 Y.setright(Z);
			 }
		 }
	//	 return root;
	}
    public Node getMinimumSubtree(Node node){
    	while(node.getLeft()!=null){
    		node=node.getLeft();
    	}
    	return node;
    }
   public Node search(int data){
	   Node x=root;
	   search(root,data);
	  Node y=found;
	  found=null;
	   return y;
   }
   Node found=null;
   private void search(Node node,int data){
	   if(node==null){
		   return ;
	   }
	   if(node.getData()==data){
		   found=node;
		   return;
	   }
	   else	if(data<node.getData()){
			   node=node.getLeft();
			   search(node, data);
		   }
		   else{
			   node=node.getRight();
			   search(node, data);
		   }
	   }
   public int getDepth(int data){
	    modifiedSearch(root,data);
	    int he=height;
	    height=0;
	    Node f=found;
	    found=null;
	  if(f!=null)return he;
	  else throw new IllegalStateException("not in binary tree");
   }
   int height=0;
   private void modifiedSearch(Node node,int data){
	   if(node==null){
		   return ;
	   }
	   if(node.getData()==data){
		   found=node;
		   return;
	   }
	   else	if(data<node.getData()){
			   node=node.getLeft();
			   height++;
			   modifiedSearch(node, data);
		   }
		   else{
			   node=node.getRight();
			   height++;
			   modifiedSearch(node, data);
		   }
	   }
   int depth;
   private void setDepth(int x){
	   depth=x;
   }
   public int getHeight(int x){
	   Node a=search(x);
	   if(a!=null){
		   Depth(a,0);
		   int d=depth;
		   depth=0;
		   return d;
	   }
	   else{
		   throw new IllegalStateException("number not found");
	   }
   }
   public void Depth(Node x,int depth){
	   if(x==null){
		   return;
	   }
	   this.setDepth(depth);
	   Depth(x.getLeft(), depth+1);
	   Depth(x.getRight(), depth+1);
}
   public int getRank(int x){
	  modifiedSearch2(root,x);
	  if(found!=null)
	  {int r=rank;
	  rank=1;
	  found=null;
	  return r;
	  }
	  else{
		  throw new IllegalStateException("not found");
	  }
   }
   int rank=1;
   private void modifiedSearch2(Node node,int data){
	   if(node==null){
		   return ;
	   }
	//   System.out.println(node.getData());
	   if(node.getData()==data){
		   found=node;
		   rank=rank+sizeofTree(node.getLeft());
		   return;
	   }
	   else	if(data<node.getData()){
			   node=node.getLeft();
			   modifiedSearch2(node, data);
		   }
		   else{
			   rank=rank+1+sizeofTree(node.getLeft());
			   node=node.getRight();
			   modifiedSearch2(node, data);
		   }
	   }
   static int size=0;
   public int sizeofTree(Node x){
      if(x==null){
    	  return 0;
      }
      else{
    	 return size=1+sizeofTree(x.getLeft())+sizeofTree(x.getRight());
      }
   }
   int noOfInversions=0;
   public int noOfInversions(){
	   noOfInversions(root);
	   int n=noOfInversions;
       noOfInversions=0;
	   return n;
   }
   private int noOfInversions(Node x){
	  if(x==null){
		  return 0;
	  }
	  else{
		 return noOfInversions=sizeofTree(x.left)+noOfInversions(x.left)+noOfInversions(x.right);
	  }
   }
   public void setSizeInNodes(Node x){
	   if(x==null){
		   return;
	   }
	   else{
	   sizeofTree(x);
       x.size=size;
       size=0;
	   setSizeInNodes(x.left);
       setSizeInNodes(x.right);
	   }
   }
}